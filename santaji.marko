import Connection from './models/connection.js'

class {
  onCreate() {
    this.state = {
      connection: new Connection(),
      loop: requestAnimationFrame(this.onLoop = this.onLoop.bind(this)),
      mouseX: 0,
      mouseY: 0,
      santas: {},
      snowflakes: [],
			trees: [],
			gifts: [],
			giftTimer: 0,
			giftsCollected: 0,
      nextSend: 0,
      lastTimestamp: 0,
    }

    this.state.connection.onSantaNew = this.onSantaNew.bind(this)
    this.state.connection.onSantaChange = this.onSantaChange.bind(this)
    this.state.connection.onSantaRemove = this.onSantaRemove.bind(this)

    window.addEventListener('keydown', this.onKeyDown.bind(this))
    window.addEventListener('keyup', this.onKeyUp.bind(this))
    //document.body.addEventListener('mousemove', this.onMouseMove.bind(this))
    //document.body.addEventListener('touchmove', this.onTouchMove.bind(this))

		// Create our trees
		for (let i = 0; i < 6; i++) {
			this.state.trees.push({
			  x: Math.random()*100
			})
		}
  }
	onMount() {
    this.el.addEventListener('mousemove', this.onMouseMove.bind(this))
		this.el.addEventListener('touchmove', this.onTouchMove.bind(this))
	}
  onLoop(timestamp) {
    let delta = timestamp - this.state.lastTimestamp
    if (this.state.nextSend <= timestamp) {
      this.state.connection.send({
        tx: this.state.mouseX,
        ty: this.state.mouseY,
      })
      this.state.nextSend = timestamp+100
    }
    // update snowflakes
    this.state.snowflakes = this.state.snowflakes.filter(snowflake => {
      if (snowflake.deathTime <= timestamp) {
        return false
      }
      snowflake.x += Math.random()*(delta/100)
      snowflake.y += Math.random()*(delta/100)
      return true
    })

    if (Math.round(timestamp%8) == 1) {
      this.state.snowflakes.push({
        x: -10,
        y: -100 + Math.random()*200,
        deathTime: timestamp + 22000
      })
    }

		// Add a new gift every so often
		let colors = ['red', 'green', 'blue', 'yellow']
		if (this.state.giftTimer <= timestamp && this.state.gifts.length < 10 && this.state.giftsCollected < 20) {
			this.state.gifts.push({
			  x: Math.random()*90,
			  y: Math.random()*90,
				color: colors[Math.floor(Math.random() * colors.length)],
			})
			this.state.giftTimer = timestamp + 3000
		}

    this.state.lastTimestamp = timestamp
    requestAnimationFrame(this.onLoop)
  }
  onKeyDown(e) {
    console.log(e)
  }
  onKeyUp(e) {
    console.log(e)
  }
  onMouseMove(e) {
    this.state.mouseX = e.clientX
    this.state.mouseY = e.clientY
  }
  onTouchMove(e) {
    this.state.mouseX = e.clientX
    this.state.mouseY = e.clientY
	}
  onSantaChange(n, e) {
    if (!this.state.santas[n]) return
    this.state.santas[n].tx = e.tx
    this.state.santas[n].ty = e.ty
    this.forceUpdate()
  }
  onSantaNew(n, isSelf=false) {
    this.state.santas[n] = {
      id: n,
      tx: -9000,
      ty: -9000,
      isSelf: isSelf,
    }
  }
  onSantaRemove(n) {
    if (!this.state.santas[n]) return
    delete this.state.santas[n]
  }
	onGiftRemove(i) {
    this.state.gifts = this.state.gifts.filter((gift, giftIndex) => giftIndex != i)
    this.state.giftsCollected++
	}
}

style {
  html {
    display: block;
    width: 100%;
    height: 100%;
  }
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-size: 4vmin;
  }
  .santaji {
    display: block;
    width: 100%;
    height: 100%;
    position: relative;
    cursor: none;
    background: #4B79A1;  /* fallback for old browsers */
    background: -webkit-linear-gradient(to top, #283E51, #0A2342);  /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to top, #283E51, #0A2342); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    background: -olinear-gradient(to top, #283E51, #0A2342); 
    overflow: hidden;
  }
	.giftsCollected {
    position: absolute;
    top: 0;
    right: 0;
    pointer-events: none;
    color: white;
    font-family: cursive;
    padding: .25em;
  }
  .giftsCollected.-done {
    color: yellow;
  }
}

div.santaji
  entityMoon x=85 y=10
  div.giftsCollected class={'-done': state.giftsCollected==20} -- Gifts Collected: ${state.giftsCollected} / 20
  for|tree| of=state.trees
	  entityTree x=tree.x
  for|gift, giftIndex| of=state.gifts
	  entityGift x=gift.x y=gift.y color=gift.color on-remove('onGiftRemove', giftIndex)
  for|snowflake| of=state.snowflakes
    entitySnowflake x=snowflake.x y=snowflake.y
  for|santaKey, santaData| in=state.santas
    if(santaData.isSelf)
      entitySanta key=santaKey x=state.mouseX y=state.mouseY isSelf=santaData.isSelf type=santaKey
    else
      entitySanta key=santaKey x=santaData.tx y=santaData.ty isSelf=santaData.isSelf type=santaKey
